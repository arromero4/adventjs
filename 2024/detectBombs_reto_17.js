// Reto #17: üí£ Busca las bombas del Grinch

// El Grinch ha estado haciendo de las suyas en el Polo Norte y ha sembrado bombas de carb√≥n explosivo üí£ en la f√°brica de juguetes de los duendes. Quiere que todos los juguetes queden inutilizados y por eso ha dejado una cuadr√≠cula donde algunas celdas tienen carb√≥n explosivo (true) y otras est√°n vac√≠as (false).

// Los duendes necesitan tu ayuda para mapear las zonas peligrosas. Cada celda vac√≠a debe mostrar un n√∫mero que indique cu√°ntas bombas de carb√≥n explosivo hay en las posiciones adyacentes, incluidas las diagonales.

// detectBombs([
//   [true, false, false],
//   [false, true, false],
//   [false, false, false]
// ])
// // [
// //   [1, 2, 1],
// //   [2, 1, 1],
// //   [1, 1, 1]
// // ]

// detectBombs([
//   [true, false],
//   [false, false]
// ])
// // [
// //   [0, 1],
// //   [1, 1]
// // ]

// detectBombs([
//   [true, true],
//   [false, false],
//   [true, true]
// ])

// // [
// //   [1, 1],
// //   [4, 4],
// //   [1, 1]
// // ]
// Nota: ¬øQuieres una pista? Seguro que has jugado al juego de buscaminas antes‚Ä¶ üòâ

/**
 * @param {boolean[][]} grid
 * @returns {number[][]}
 */
function detectBombs(grid) {
  const rows = grid.length;
  const cols = grid[0].length;

  // Crear una copia de la cuadr√≠cula para almacenar el resultado
  const result = Array.from({ length: rows }, () => Array(cols).fill(0));

  // Movimientos para las posiciones adyacentes (incluye diagonales)
  const directions = [
    [-1, -1], [-1, 0], [-1, 1],
    [ 0, -1],          [ 0, 1],
    [ 1, -1], [ 1, 0], [ 1, 1]
  ];

  // Recorremos la cuadr√≠cula
  for (let row = 0; row < rows; row++) {
    for (let col = 0; col < cols; col++) {
      if (grid[row][col] === true) {
        // Para cada celda con bomba, incrementamos las celdas vecinas en `result`
        for (const [dx, dy] of directions) {
          const newRow = row + dx;
          const newCol = col + dy;

          // Verificar que las coordenadas est√°n dentro de los l√≠mites
          if (
            newRow >= 0 &&
            newRow < rows &&
            newCol >= 0 &&
            newCol < cols
          ) {
            result[newRow][newCol]++;
          }
        }
      }
    }
  }

  return result;
}
  